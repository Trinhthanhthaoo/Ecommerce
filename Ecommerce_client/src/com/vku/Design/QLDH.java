/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vku.Design;

import com.google.gson.Gson;
import com.vku.Model.Order;
import com.vku.Model.Product;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author admin!
 */
public class QLDH extends javax.swing.JPanel {

    /**
     * Creates new form QLDH
     */
    public QLDH() {
        initComponents();
        showData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        showdata = new javax.swing.JTable();
        txtUserID = new javax.swing.JTextField();
        txtSum = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        txtOrderID = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(207, 224, 232));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("QUẢN LÝ ĐƠN HÀNG");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(34, 34, 34))
        );

        jPanel2.setBackground(new java.awt.Color(207, 224, 232));

        showdata.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "OrderID", "UserID ", "TỔNG CỘNG", "NGÀY ĐẶT"
            }
        ));
        showdata.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showdataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(showdata);

        txtUserID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserIDActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/vku/icon/edit-icon.png"))); // NOI18N
        jButton3.setText("cập nhật");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel2.setText("UserID");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel3.setText("Tổng cộng");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel4.setText("OrderID");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel5.setText("Ngày đặt");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(106, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSum, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(114, 114, 114))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSum, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(7, 7, 7))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtUserIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserIDActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
     Socket clientSocket = null;
    DataOutputStream outClient = null;

    try {
        clientSocket = new Socket("localhost", 8300);

        String orderIdStr = txtOrderID.getText().trim();
        String customerIdStr = txtUserID.getText().trim();
        String orderDate = txtDate.getText().trim();
        String totalAmountStr = txtSum.getText().trim();

        if (orderIdStr.isEmpty() || customerIdStr.isEmpty() || orderDate.isEmpty() || totalAmountStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Các trường không được để trống", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int orderId = Integer.parseInt(orderIdStr);
        int customerId = Integer.parseInt(customerIdStr);
        double totalAmount = Double.parseDouble(totalAmountStr);

        // Send data to server
        outClient = new DataOutputStream(clientSocket.getOutputStream());
        outClient.writeUTF("UPDATE_ORDER");
        outClient.flush();
        outClient.writeInt(orderId);
        outClient.flush();
        outClient.writeInt(customerId);
        outClient.flush();
        outClient.writeUTF(orderDate);
        outClient.flush();
        outClient.writeDouble(totalAmount);
        outClient.flush();

        // Read server response
        DataInputStream inClient = new DataInputStream(clientSocket.getInputStream());
        boolean done = false;

        while (!done) {
            byte messageType = inClient.readByte();
            switch (messageType) {
                case 1:
                    boolean result = inClient.readBoolean();
                    if (result) {
                        JOptionPane.showMessageDialog(this, "Cập nhật đơn hàng thành công!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        showData();
                    } else {
                        JOptionPane.showMessageDialog(this, "Cập nhật đơn hàng thất bại.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    done = true;
                    break;
                default:
                    done = true;
                    break;
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Cập nhật đơn hàng thất bại.", "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (outClient != null) {
                outClient.close();
            }
            if (clientSocket != null) {
                clientSocket.close();
            }
        } catch (IOException ex) {
            System.err.println("Error closing connection: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void showdataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showdataMouseClicked
      
        int row = showdata.getSelectedRow();
        String id = String.valueOf(showdata.getValueAt(row, 0));
        String name = String.valueOf(showdata.getValueAt(row, 1));
        String des = String.valueOf(showdata.getValueAt(row, 2));
        String dess = String.valueOf(showdata.getValueAt(row, 3));
       
        txtOrderID.setText(id);
        txtUserID.setText(name);
        txtSum.setText(des);
        txtDate.setText(dess);
       
    }//GEN-LAST:event_showdataMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable showdata;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtOrderID;
    private javax.swing.JTextField txtSum;
    private javax.swing.JTextField txtUserID;
    // End of variables declaration//GEN-END:variables

    private void showData() {
        Socket clientSocket = null;
        DataOutputStream outClient = null;

        Gson gson = new Gson();
        
        try {
            // Establish connection to server
            clientSocket = new Socket("localhost", 8300);
            
            // Send data to server
            outClient = new DataOutputStream(clientSocket.getOutputStream());
            outClient.writeUTF("GET_ALL_ORDER");
            outClient.flush();
        
            // Read server response
            DataInputStream inClient = new DataInputStream(clientSocket.getInputStream());

            boolean done = false;

            while (!done) {
                byte messageType = inClient.readByte();

                switch (messageType) {
                    case 1:
                        String strOrders = inClient.readUTF();
                        
                        Order[] orders = gson.fromJson(strOrders, Order[].class);
                        List<Order> list = new ArrayList<>(Arrays.asList(orders));
                        DefaultTableModel model = (DefaultTableModel) (showdata.getModel());
                        model.setRowCount(0);
                        for (Order order : list) {
                            model.addRow(new Object[]{
                                order.getOrderId(),
                                order.getUserID(),
                                order.getTotalAmount(),
                                order.getOrderDate(),
                              
                            });
                        }
                        
                        break;
                    default:
                        done = true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
            }
}
